type SignalData {
    name: String!
    frequency: Float!
    timestamp: String!
    dataPoints: [Float!]!
}

type SignalDataRow {
    timestamp: Long!
    value: Float!
}

type SignalDataRowList {
    name: String!
    rows: [SignalDataRow]!
}

type SignalScoreRow {
    timestampFrom: Long!
    timestampTo: Long!
    value: Float!
}

type SignalScoreRowListItem {
    name: String!
    score: SignalScoreRow!
}

type OverallScoreRow {
    timestamp: Long!
    value: Float!
    spo2: Float
    ecg: Float
    resp: Float
    temp: Float
}

type Query {
    allSignalData(name: String!, from: Long = 0, to: Long = 9223372036854775807) : SignalData
    multiSignalData(names: [String!]!, from: Long = 0, to: Long = 9223372036854775807) : [SignalData]
    multiSignalDataRow(names: [String!]!, from: Long = 0, to: Long = 9223372036854775807) : [SignalDataRowList]
    signalDataRow(name: String!, from: Long = 0, to: Long = 9223372036854775807) : [SignalDataRow]
    signalScoreData(name: String!, from: Long = 0, to: Long = 9223372036854775807) : [SignalScoreRow]
    lastSignalScoreRowsInRange(from: Long = 0, to: Long = 9223372036854775807) : [SignalScoreRowListItem]
    overallScoreRow(from: Long = 0, to: Long = 9223372036854775807) : [OverallScoreRow]
}

type Mutation {
    storeSignalData(name: String!, frequency: Float!, timestamp: String!, dataPoints: [Float!]!): SignalData
    storeSignalScore(name: String!, from: Long!, to: Long!, value: Float!): SignalScoreRow
    storeOverallScore(timestamp: Long!, value: Float!, spo2: Float, ecg: Float, resp: Float, temp: Float) : OverallScoreRow
}

schema {
    query: Query
    mutation: Mutation
}
